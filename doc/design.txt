summary:

	this tool:
	- is run once a day by Eelis (or whoever)
	- downloads track list (containing urls and like/dislikes) that we collaboratively edit in a gitlab repo, in a subset of markdown format
	- maintains cache of downloaded tracks (needed for e.g. youtube, which vlc's native support for seems broken)
	- picks random tracks with weights based on likes/dislikes written in track list, and generates vlc playlist

track list file format:

	subset of markdown: only #-style headers, and list items.
	
	headers are ignored. the list items must be a music link followed by likes/dislikes, for example:

	- [Melodic Techno set 1 (N'to, worakls, solee...) - Ella](https://www.youtube.com/watch?v=IgsWM2_UebE) @Eelis -@Gielbier @Daan
	- [Liftboy - Sheeks](tracks/Liftboi - Scheeks.mp3) @Eelis

	this indicates that Eelis and Daan like this track but Gielbier doesn't.
	the second entry above links to a file stored in a subdir in the same collaboratively edited repo. this can be used for tracks for which we don't have a url.

	lines with nonpositive score are discarded, where score is defined as number of likes minus number of dislikes times 2 (so that it takes at least 3 likes to override a dislike)
	
benefits of the scheme:

	subset of markdown means list is rendered nicely on gitlab, no need for separate hosting
	
	grouping using headers (e.g. "# Mahtz Mixes")

	can maybe allow likes/dislikes per group, too

	we get all the features of version control for free: backup, blaming, reverting, forking, etc.

	easy to perform edits such as "remove all of X's votes" when X leaves the company.

	easy to run a link checker on the rendered track list.

playlist generation:

	- picks random tracks to fill the day, using scores as weights, so that a track with score twice as high is played twice as often

	- downloads and adds the tracks to local cache if necessary (e.g. for youtube)

	- generates playlist 
	
	, and adds url of cached file to playlist
	
	looks at the url for the tracks it picked:
		- if it's a youtube url or relative link, 
		- otherwise, just add url to playlist

	supporting relative links means that for tracks for which we don't have a url where they are available, we can just put the music file itself in a subdir in the repo and 
